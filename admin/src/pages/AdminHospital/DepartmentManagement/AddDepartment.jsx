import React, { useState } from 'react';
import { Modal, Form, Input, Button, Spin, notification, Row, Col } from 'antd';
import { PlusOutlined, BankOutlined } from '@ant-design/icons';
import { createDepartment } from '../../../services/departmentService';

const { TextArea } = Input;

const AddDepartment = ({ visible, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [spinning, setSpinning] = useState(false);

  const success = () => {
    notification.success({
      message: 'Th√†nh c√¥ng',
      description: 'ƒê√£ th√™m khoa/ph√≤ng th√†nh c√¥ng!',
      placement: 'topRight',
      duration: 3
    });
  };

  const error = (message = 'Kh√¥ng th·ªÉ th√™m khoa/ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.') => {
    notification.error({
      message: 'L·ªói',
      description: message,
      placement: 'topRight',
      duration: 5
    });
  };

  const handleSubmit = async (values) => {
    setSpinning(true);
    
    try {
      // ‚úÖ Chu·∫©n b·ªã data theo format API y√™u c·∫ßu
      const departmentData = {
        hospitalId: 200, // Default hospitalId, c√≥ th·ªÉ l·∫•y t·ª´ context ho·∫∑c props
        name: values.name?.trim(),
        description: values.description?.trim()
      };

      console.log('üè• ƒêang t·∫°o khoa/ph√≤ng v·ªõi d·ªØ li·ªáu:', departmentData);

      const response = await createDepartment(departmentData);
      console.log('‚úÖ Ph·∫£n h·ªìi t·∫°o khoa/ph√≤ng:', response);

      // ‚úÖ Enhanced success validation
      if (response?.success || response?.result || response?.id) {
        form.resetFields();
        success();
        
        // ‚úÖ Call onSuccess callback ƒë·ªÉ refresh danh s√°ch departments
        if (onSuccess && typeof onSuccess === 'function') {
          setTimeout(() => {
            onSuccess(response);
          }, 500);
        }
        
        // ‚úÖ Auto close modal after success
        setTimeout(() => {
          onCancel();
        }, 1500);
      } else {
        throw new Error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server');
      }
    } catch (err) {
      console.error('‚ùå L·ªói khi th√™m khoa/ph√≤ng:', err);

      // ‚úÖ Enhanced error handling v·ªõi ti·∫øng Vi·ªát
      let errorMessage = 'Kh√¥ng th·ªÉ th√™m khoa/ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.';

      if (err.response?.data) {
        const errorData = err.response.data;
        console.log('üîç Error response data:', errorData);

        if (errorData.title) {
          switch (errorData.title) {
            case 'DEPARTMENT_NAME_EXISTS':
              errorMessage = 'üè• T√™n khoa/ph√≤ng ƒë√£ t·ªìn t·∫°i! Vui l√≤ng s·ª≠ d·ª•ng t√™n kh√°c.';
              break;
            case 'HOSPITAL_NOT_FOUND':
              errorMessage = 'üè• Kh√¥ng t√¨m th·∫•y b·ªánh vi·ªán! Vui l√≤ng ki·ªÉm tra l·∫°i.';
              break;
            case 'VALIDATION_ERROR':
              errorMessage = '‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p.';
              break;
            case 'PERMISSION_DENIED':
              errorMessage = 'üîí B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m khoa/ph√≤ng m·ªõi.';
              break;
            default:
              errorMessage = `‚ùå ${errorData.title.replace(/_/g, ' ')} - Vui l√≤ng th·ª≠ l·∫°i.`;
              break;
          }
        } else if (errorData.message) {
          errorMessage = `‚ùå ${errorData.message}`;
        }
      } else if (err.message) {
        errorMessage = `‚ùå ${err.message}`;
      }

      if (err.code === 'NETWORK_ERROR' || !err.response) {
        errorMessage = 'üåê L·ªói k·∫øt n·ªëi m·∫°ng! Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
      }

      error(errorMessage);
    } finally {
      setSpinning(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  return (
    <Modal
      title={
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <BankOutlined style={{ marginRight: 8, color: '#1890ff' }} />
          Th√™m Khoa/Ph√≤ng m·ªõi
        </div>
      }
      open={visible} // ‚úÖ Antd v5 compatibility
      onCancel={handleCancel}
      footer={null}
      width={650}
      className="custom-modal"
      destroyOnClose
      maskClosable={false}
      style={{ top: 20 }}
    >
      <Spin spinning={spinning} tip="ƒêang t·∫°o khoa/ph√≤ng...">
        <div className="department-form-container" style={{ padding: '20px 0' }}>
          <Form
            form={form}
            layout="vertical"
            onFinish={handleSubmit}
            scrollToFirstError
          >
            {/* ‚úÖ Th√¥ng tin c∆° b·∫£n */}
            <div style={{ 
              marginBottom: 24, 
              padding: '16px', 
              background: '#f0f7ff', 
              borderRadius: '8px',
              border: '1px solid #d6e4ff'
            }}>
              <h4 style={{ color: '#1890ff', marginBottom: 16 }}>üè• Th√¥ng tin Khoa/Ph√≤ng</h4>
              
              <Form.Item
                name="name"
                label="T√™n khoa/ph√≤ng"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n khoa/ph√≤ng' },
                  { min: 2, message: 'T√™n khoa/ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±' },
                  { max: 100, message: 'T√™n khoa/ph√≤ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±' }
                ]}
                hasFeedback
              >
                <Input
                  placeholder="V√≠ d·ª•: Khoa C·∫•p c·ª©u, Khoa Tim m·∫°ch, Ph√≤ng X√©t nghi·ªám"
                  showCount
                  maxLength={100}
                  size="large"
                />
              </Form.Item>

              <Form.Item
                name="description"
                label="M√¥ t·∫£ chi ti·∫øt"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' },
                  { min: 10, message: 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' },
                  { max: 500, message: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±' }
                ]}
                hasFeedback
              >
                <TextArea
                  placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ch·ª©c nƒÉng, d·ªãch v·ª• v√† ho·∫°t ƒë·ªông c·ªßa khoa/ph√≤ng n√†y..."
                  rows={4}
                  showCount
                  maxLength={500}
                />
              </Form.Item>
            </div>

            {/* ‚úÖ L∆∞u √Ω h·ªá th·ªëng */}
            <div style={{
              padding: '16px',
              backgroundColor: '#f6ffed',
              borderRadius: '6px',
              marginBottom: '24px',
              border: '1px solid #b7eb8f'
            }}>
              <div style={{ 
                color: '#389e0d', 
                fontWeight: 500, 
                marginBottom: 8,
                display: 'flex',
                alignItems: 'center'
              }}>
                üí° L∆∞u √Ω quan tr·ªçng:
              </div>
              <ul style={{ 
                margin: 0, 
                paddingLeft: '20px',
                fontSize: '13px', 
                color: '#666',
                lineHeight: '1.6'
              }}>
                <li><strong>ID B·ªánh vi·ªán</strong> s·∫Ω ƒë∆∞·ª£c g√°n t·ª± ƒë·ªông theo h·ªá th·ªëng</li>
                <li><strong>T√™n khoa/ph√≤ng</strong> ph·∫£i l√† duy nh·∫•t trong b·ªánh vi·ªán</li>
                <li>C√≥ th·ªÉ c·∫≠p nh·∫≠t th√™m th√¥ng tin chi ti·∫øt sau khi t·∫°o th√†nh c√¥ng</li>
                <li>Khoa/ph√≤ng m·ªõi s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t ngay sau khi t·∫°o</li>
              </ul>
            </div>

            {/* ‚úÖ N√∫t h√†nh ƒë·ªông */}
            <Row justify="end" gutter={8}>
              <Col>
                <Button 
                  onClick={handleCancel}
                  disabled={spinning}
                  size="large"
                >
                  H·ªßy
                </Button>
              </Col>
              <Col>
                <Button
                  type="primary"
                  htmlType="submit"
                  loading={spinning}
                  icon={<PlusOutlined />}
                  size="large"
                  style={{
                    backgroundColor: '#1890ff',
                    borderColor: '#1890ff',
                    minWidth: '140px'
                  }}
                >
                  {spinning ? 'ƒêang t·∫°o...' : 'T·∫°o Khoa/Ph√≤ng'}
                </Button>
              </Col>
            </Row>
          </Form>
        </div>
      </Spin>
    </Modal>
  );
};

export default AddDepartment;