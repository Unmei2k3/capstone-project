import React, { useState, useEffect } from 'react';
import {
    Modal,
    Form,
    Input,
    Select,
    Row,
    Col,
    Button,
    Spin,
    DatePicker,
    InputNumber,
    Upload,
    Alert,
    Steps,
    message,
    ConfigProvider
} from 'antd';
import {
    UserAddOutlined,
    SaveOutlined,
    UserOutlined,
    MedicineBoxOutlined,
    HeartOutlined,
    UploadOutlined,
    CheckCircleOutlined
} from '@ant-design/icons';
import { useDispatch, useSelector } from 'react-redux';
import { clearMessage, setMessage } from '../../../redux/slices/messageSlice';
import { createDoctor } from '../../../services/doctorService';
import { getHospitalById, getSpecializationsByHospitalId } from '../../../services/hospitalService';
import { getDepartmentsByHospitalId } from '../../../services/departmentService';
import { getProvinces } from '../../../services/provinceService';
import dayjs from 'dayjs';
import 'dayjs/locale/vi';
import locale from 'antd/locale/vi_VN';

// ‚úÖ Set dayjs locale to Vietnamese
dayjs.locale('vi');

const { Option } = Select;
const { Step } = Steps;

const AddStaff = ({ visible, onCancel, onSuccess, staffType = 'doctor', departments, specializations }) => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const [currentStep, setCurrentStep] = useState(0);
    const [fileList, setFileList] = useState([]);
    const [formData, setFormData] = useState({});
    const [currentHospital, setCurrentHospital] = useState(null);
    const [hospitalSpecializations, setHospitalSpecializations] = useState([]);
    const [hospitalDepartments, setHospitalDepartments] = useState([]);

    // States for provinces and wards
    const [provinces, setProvinces] = useState([]);
    const [wards, setWards] = useState([]);
    const [selectedProvince, setSelectedProvince] = useState(null);
    const [loadingProvinces, setLoadingProvinces] = useState(false);

    const dispatch = useDispatch();
    const user = useSelector((state) => state.user.user);
    const messageState = useSelector((state) => state.message);
    const [messageApi, contextHolder] = message.useMessage();

    // ‚úÖ Handle Redux messages
    useEffect(() => {
        if (messageState && messageState.content) {
            messageApi.open({
                type: messageState.type,
                content: messageState.content,
            });
            dispatch(clearMessage());
        }
    }, [messageState, messageApi, dispatch]);

    console.log("üîç D·ªØ li·ªáu user hi·ªán t·∫°i:", JSON.stringify(user));

    // Fetch provinces on component mount
    useEffect(() => {
        if (visible) {
            fetchProvinces();
        }
    }, [visible]);

    // Function to fetch provinces
    const fetchProvinces = async () => {
        setLoadingProvinces(true);
        try {
            console.log("üåè ƒêang t·∫£i danh s√°ch t·ªânh th√†nh...");
            const data = await getProvinces();
            console.log("üìç ƒê√£ t·∫£i t·ªânh th√†nh:", data.data);
            setProvinces(data.data || []);
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i t·ªânh th√†nh:", error);
            dispatch(setMessage({
                type: 'error',
                content: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë'
            }));
        } finally {
            setLoadingProvinces(false);
        }
    };

    // Update wards when province changes
    useEffect(() => {
        if (selectedProvince && provinces.length > 0) {
            const provinceObj = provinces.find((p) => p.province === selectedProvince);
            const wardsList = provinceObj?.wards || [];
            setWards(wardsList);
            console.log("üèòÔ∏è Ph∆∞·ªùng/x√£ c·ªßa", selectedProvince, ":", wardsList);
        } else {
            setWards([]);
        }
    }, [selectedProvince, provinces]);

    // Handle form value changes
    const onFormValuesChange = (changedValues) => {
        if ("province" in changedValues) {
            const newProvince = changedValues.province || null;
            setSelectedProvince(newProvince);
            // Reset ward when province changes
            form.setFieldsValue({ ward: undefined });
            console.log("üîÑ T·ªânh th√†nh ƒë√£ thay ƒë·ªïi th√†nh:", newProvince);
        }
    };

    useEffect(() => {
        if (visible) {
            form.resetFields();
            setCurrentStep(0);
            setFileList([]);
            setFormData({});
            setSelectedProvince(null);
            setWards([]);

            fetchHospitalData();
        }
    }, [visible, form, user]);

    const fetchHospitalData = async () => {
        setLoading(true);
        try {
            console.log('üîÑ ƒêang t·∫£i d·ªØ li·ªáu b·ªánh vi·ªán...');

            const hospitalId = user?.hospitals?.[0]?.id;
            console.log('üè• ID b·ªánh vi·ªán t·ª´ user.hospitals[0].id:', hospitalId);

            if (!hospitalId) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ID b·ªánh vi·ªán trong d·ªØ li·ªáu user.hospitals');
            }

            const [hospital, specs, departments] = await Promise.all([
                getHospitalById(hospitalId),
                getSpecializationsByHospitalId(hospitalId),
                getDepartmentsByHospitalId(hospitalId)
            ]);

            setCurrentHospital(hospital);
            setHospitalSpecializations(specs);
            setHospitalDepartments(departments);

            console.log('üè• B·ªánh vi·ªán hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p:', hospital);
            console.log('ü©∫ Chuy√™n khoa b·ªánh vi·ªán ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p:', specs);
            console.log('üè¢ Khoa b·ªánh vi·ªán ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p:', departments);

        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu b·ªánh vi·ªán:', error);

            const fallbackHospitalId = user?.hospitals?.[0]?.id || 105;
            setCurrentHospital({
                id: fallbackHospitalId,
                name: user?.hospitals?.[0]?.name || 'B·ªánh vi·ªán m·∫∑c ƒë·ªãnh',
                address: 'Kh√¥ng r√µ'
            });

            setHospitalSpecializations(specializations || []);
            setHospitalDepartments(departments || []);

            dispatch(setMessage({
                type: 'warning',
                content: 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·ªánh vi·ªán. ƒêang s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.'
            }));
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async () => {
        console.log('üöÄ handleSubmit ƒë∆∞·ª£c g·ªçi');
        setLoading(true);

        try {
            console.log('üîÑ B·∫Øt ƒë·∫ßu g·ª≠i form...');

            const currentStepValues = form.getFieldsValue();
            const allValues = { ...formData, ...currentStepValues };

            console.log('üìù Gi√° tr·ªã b∆∞·ªõc hi·ªán t·∫°i:', currentStepValues);
            console.log('üíæ D·ªØ li·ªáu form ƒë√£ l∆∞u:', formData);
            console.log('üîÑ Gi√° tr·ªã ƒë√£ h·ª£p nh·∫•t:', allValues);

            dispatch(clearMessage());

            // Enhanced validation
            const missingFields = [];

            if (!allValues.fullname) missingFields.push('fullname');
            if (!allValues.phoneNumber) missingFields.push('phoneNumber');
            if (!allValues.password) missingFields.push('password');
            if (!allValues.cccd) missingFields.push('cccd');
            if (!allValues.gender) missingFields.push('gender');
            if (!allValues.dob) missingFields.push('dob');
            if (!allValues.province) missingFields.push('province');
            if (!allValues.ward) missingFields.push('ward');
            if (!allValues.streetAddress) missingFields.push('streetAddress');
            if (!allValues.description) missingFields.push('description');
            if (!allValues.position) missingFields.push('position');
            if (!allValues.departmentId) missingFields.push('departmentId');

            // Fix specialization validation
            if (allValues.specialization === undefined || allValues.specialization === null || allValues.specialization === '') {
                missingFields.push('specialization');
            }

            console.log('üîç Specialization validation:', {
                value: allValues.specialization,
                type: typeof allValues.specialization,
                isUndefined: allValues.specialization === undefined,
                isNull: allValues.specialization === null,
                isEmpty: allValues.specialization === '',
                isZero: allValues.specialization === 0,
                isMissing: allValues.specialization === undefined || allValues.specialization === null || allValues.specialization === ''
            });

            if (missingFields.length > 0) {
                console.error('‚ùå Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc:', missingFields);
                const errorMsg = `Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(', ')}`;

                dispatch(setMessage({
                    type: 'error',
                    content: errorMsg
                }));

                throw new Error(errorMsg);
            }

            if (staffType === 'doctor') {
                // Get hospital ID
                const hospitalId = user?.hospitals?.[0]?.id || currentHospital?.id;

                if (!hospitalId) {
                    const errorMsg = 'Kh√¥ng t√¨m th·∫•y ID b·ªánh vi·ªán. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
                    dispatch(setMessage({
                        type: 'error',
                        content: errorMsg
                    }));
                    throw new Error(errorMsg);
                }

                // Enhanced specialization processing
                let specializationIds = [];

                // Primary specialization
                console.log('ü©∫ Processing primary specialization:', allValues.specialization);
                
                if (allValues.specialization !== undefined && allValues.specialization !== null && allValues.specialization !== '') {
                    let specId;
                    
                    if (hospitalSpecializations && hospitalSpecializations.length > 0) {
                        // Handle both index-based and direct ID scenarios
                        const selectedSpec = hospitalSpecializations[allValues.specialization];
                        
                        if (selectedSpec) {
                            // If it's an object with id property
                            specId = selectedSpec.id || allValues.specialization;
                        } else {
                            // If allValues.specialization is already an ID
                            specId = parseInt(allValues.specialization);
                        }

                        console.log('ü©∫ Chuy√™n khoa ch√≠nh:', {
                            selectedIndex: allValues.specialization,
                            selectedSpec: selectedSpec,
                            finalId: specId,
                            hospitalSpecializations: hospitalSpecializations
                        });
                    } else {
                        specId = parseInt(allValues.specialization);
                    }

                    // Add to array if valid (including 0 and 1)
                    if (specId !== undefined && specId !== null && !isNaN(specId)) {
                        specializationIds.push(specId);
                    }
                }

                // Additional specializations
                if (allValues.specializationIds && allValues.specializationIds.length > 0) {
                    const additionalIds = allValues.specializationIds.map(id => {
                        if (hospitalSpecializations && hospitalSpecializations.length > 0) {
                            const hospitalSpec = hospitalSpecializations[id];
                            return hospitalSpec?.id || parseInt(id);
                        }
                        return parseInt(id);
                    }).filter(id => id !== undefined && id !== null && !isNaN(id) && !specializationIds.includes(id));

                    specializationIds = [...specializationIds, ...additionalIds];
                }

                console.log('ü©∫ ID chuy√™n khoa cu·ªëi c√πng:', specializationIds);

                // Enhanced default specializations logic
                if (specializationIds.length === 0) {
                    console.warn('‚ö†Ô∏è Kh√¥ng c√≥ chuy√™n khoa n√†o ƒë∆∞·ª£c ch·ªçn');
                    
                    // Try to get first available specialization
                    if (hospitalSpecializations && hospitalSpecializations.length > 0) {
                        const firstSpec = hospitalSpecializations[0];
                        const defaultId = firstSpec.id || 1;
                        specializationIds = [defaultId];
                        console.log('üìã S·ª≠ d·ª•ng chuy√™n khoa ƒë·∫ßu ti√™n:', defaultId);
                    } else {
                        specializationIds = [1]; // Fallback
                        console.log('üìã S·ª≠ d·ª•ng chuy√™n khoa m·∫∑c ƒë·ªãnh: [1]');
                    }
                }

                // Format date properly
                const dobFormatted = allValues.dob
                    ? (typeof allValues.dob === 'string'
                        ? allValues.dob
                        : allValues.dob.format('YYYY-MM-DD'))
                    : null;

                // Prepare doctor data
                const doctorData = {
                    id: 0,
                    hospitalAffiliations: [
                        {
                            hospitalId: parseInt(hospitalId),
                            departmentId: parseInt(allValues.departmentId),
                            contractStart: new Date().toISOString(),
                            contractEnd: new Date(Date.now() + (365 * 24 * 60 * 60 * 1000)).toISOString(),
                            position: allValues.position?.trim() || "B√°c sƒ©"
                        }
                    ],
                    user: {
                        id: 0,
                        fullname: allValues.fullname?.trim() || "",
                        phoneNumber: allValues.phoneNumber?.trim() || "",
                        email: allValues.email?.trim() || `${allValues.phoneNumber}@hospital.com`,
                        avatarUrl: allValues.avatarUrl?.trim() || "",
                        dob: dobFormatted,
                        gender: allValues.gender === 'male',
                        job: "B√°c sƒ©",
                        cccd: allValues.cccd?.trim() || "",
                        province: allValues.province?.trim() || "",
                        ward: allValues.ward?.trim() || "",
                        streetAddress: allValues.streetAddress?.trim() || ""
                    },
                    description: allValues.description?.trim() || "",
                    practicingFrom: new Date().toISOString(),
                    specializationIds: specializationIds
                };

                console.log('üè• Payload b√°c sƒ© cu·ªëi c√πng:', JSON.stringify(doctorData, null, 2));

                // Enhanced validation with better error messages
                if (!doctorData.user.fullname) {
                    const errorMsg = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
                    dispatch(setMessage({ type: 'error', content: errorMsg }));
                    throw new Error(errorMsg);
                }
                if (!doctorData.user.phoneNumber) {
                    const errorMsg = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
                    dispatch(setMessage({ type: 'error', content: errorMsg }));
                    throw new Error(errorMsg);
                }
                if (!doctorData.hospitalAffiliations[0].hospitalId) {
                    const errorMsg = 'ID b·ªánh vi·ªán l√† b·∫Øt bu·ªôc';
                    dispatch(setMessage({ type: 'error', content: errorMsg }));
                    throw new Error(errorMsg);
                }
                if (!doctorData.hospitalAffiliations[0].departmentId) {
                    const errorMsg = 'ID khoa l√† b·∫Øt bu·ªôc';
                    dispatch(setMessage({ type: 'error', content: errorMsg }));
                    throw new Error(errorMsg);
                }
                if (!doctorData.specializationIds.length) {
                    const errorMsg = '√çt nh·∫•t m·ªôt chuy√™n khoa l√† b·∫Øt bu·ªôc';
                    dispatch(setMessage({ type: 'error', content: errorMsg }));
                    throw new Error(errorMsg);
                }

                console.log('‚úÖ T·∫•t c·∫£ x√°c th·ª±c ƒë√£ th√†nh c√¥ng, ƒëang g·ªçi API...');

                // Show loading message
                dispatch(setMessage({
                    type: 'loading',
                    content: 'ƒêang t·∫°o t√†i kho·∫£n b√°c sƒ©...'
                }));

                // Call API v·ªõi enhanced logging
                let response;
                try {
                    console.log('üåê Chu·∫©n b·ªã g·ªçi API createDoctor...');
                    response = await createDoctor(doctorData);
                    console.log('üì• createDoctor tr·∫£ v·ªÅ:', response);
                } catch (apiError) {
                    console.error('üî• L·ªói API ƒë√£ ƒë∆∞·ª£c b·∫Øt:', apiError);
                    console.error('üî• Chi ti·∫øt l·ªói API:', {
                        message: apiError.message,
                        status: apiError.response?.status,
                        data: apiError.response?.data,
                        headers: apiError.response?.headers
                    });

                    throw apiError; // Re-throw ƒë·ªÉ handle ·ªü catch b√™n ngo√†i
                }

                // Check response v·ªõi logging chi ti·∫øt
                console.log('üîç ƒêang ki·ªÉm tra ph·∫£n h·ªìi th√†nh c√¥ng...');
                console.log('- response:', response);
                console.log('- response === true:', response === true);
                console.log('- response?.success:', response?.success);
                console.log('- response?.status:', response?.status);

                const isSuccess = (
                    response === true ||
                    response?.success === true ||
                    response?.success !== false ||
                    (response?.status >= 200 && response?.status < 300) ||
                    response?.message?.toLowerCase().includes('success') ||
                    response?.result ||
                    (!response?.error && response !== false && response !== null)
                );

                console.log('üéØ isSuccess ƒë∆∞·ª£c x√°c ƒë·ªãnh l√†:', isSuccess);

                if (isSuccess) {
                    console.log('‚úÖ T·∫°o b√°c sƒ© th√†nh c√¥ng');

                    // Show success message
                    dispatch(setMessage({
                        type: 'success',
                        content: 'üéâ T·∫°o b√°c sƒ© th√†nh c√¥ng!'
                    }));

                    // Reset form
                    form.resetFields();
                    setFileList([]);
                    setCurrentStep(0);
                    setFormData({});
                    setSelectedProvince(null);
                    setWards([]);

                    // Close modal sau m·ªôt ch√∫t delay ƒë·ªÉ user th·∫•y success message
                    setTimeout(() => {
                        onSuccess();
                    }, 1500);

                } else {
                    const errorMessage = response?.message || response?.error || response?.title || 'T·∫°o b√°c sƒ© th·∫•t b·∫°i';
                    console.error('‚ùå T·∫°o th·∫•t b·∫°i v·ªõi th√¥ng b√°o:', errorMessage);

                    // Show error message
                    dispatch(setMessage({
                        type: 'error',
                        content: `‚ùå ${errorMessage}`
                    }));

                    throw new Error(errorMessage);
                }
            }
        } catch (error) {
            console.error('‚ùå L·ªói trong handleSubmit:', error);
            console.error('üîç Error stack:', error.stack);

            let errorMessage = `Kh√¥ng th·ªÉ t·∫°o ${staffType === 'doctor' ? 'b√°c sƒ©' : 'ƒëi·ªÅu d∆∞·ª°ng'}. Vui l√≤ng th·ª≠ l·∫°i.`;

            if (error.response?.data) {
                console.log('üîç Chi ti·∫øt l·ªói API:', error.response.data);

                if (typeof error.response.data === 'string') {
                    errorMessage = error.response.data;
                } else if (error.response.data.message) {
                    errorMessage = error.response.data.message;
                } else if (error.response.data.title) {
                    errorMessage = error.response.data.title;
                } else if (error.response.data.errors) {
                    const validationErrors = Object.values(error.response.data.errors).flat();
                    errorMessage = validationErrors.join(', ');
                } else if (error.response.data.error) {
                    errorMessage = error.response.data.error;
                }
            } else if (error.message) {
                errorMessage = error.message;
            }

            console.log('üì§ Hi·ªÉn th·ªã th√¥ng b√°o l·ªói:', errorMessage);

            // Show error message
            dispatch(setMessage({
                type: 'error',
                content: `‚ùå ${errorMessage}`
            }));

        } finally {
            console.log('üèÅ handleSubmit finally block');
            setLoading(false);
        }
    };

    const nextStep = async () => {
        try {
            let fieldsToValidate = [];

            switch (currentStep) {
                case 0:
                    fieldsToValidate = [
                        'fullname', 'phoneNumber', 'gender', 'dob', 'cccd',
                        'password', 'confirmPassword', 'province', 'ward', 'streetAddress'
                    ];
                    break;
                case 1:
                    fieldsToValidate = [
                        'description', 'position', 'departmentId', 'specialization'
                    ];
                    break;
                default:
                    break;
            }

            if (fieldsToValidate.length > 0) {
                const values = await form.validateFields(fieldsToValidate);
                console.log(`‚úÖ B∆∞·ªõc ${currentStep} ƒë√£ x√°c th·ª±c gi√° tr·ªã:`, values);

                // Enhanced debug logging for specialization
                if (values.specialization !== undefined) {
                    console.log('üîç Specialization validation in nextStep:', {
                        value: values.specialization,
                        type: typeof values.specialization,
                        isValid: values.specialization !== undefined && values.specialization !== null && values.specialization !== ''
                    });
                }

                setFormData(prev => ({
                    ...prev,
                    ...values
                }));

                console.log('üíæ D·ªØ li·ªáu form state ƒë√£ c·∫≠p nh·∫≠t:', { ...formData, ...values });
            }

            setCurrentStep(currentStep + 1);
        } catch (error) {
            console.log('‚ùå X√°c th·ª±c b∆∞·ªõc th·∫•t b·∫°i:', error);

            const errorFields = error.errorFields || [];
            if (errorFields.length > 0) {
                const missingFields = errorFields.map(field => field.name[0]).join(', ');

                // Show validation error message
                dispatch(setMessage({
                    type: 'error',
                    content: `Vui l√≤ng ho√†n th√†nh c√°c tr∆∞·ªùng sau: ${missingFields}`
                }));
            }
        }
    };

    const prevStep = () => {
        const currentValues = form.getFieldsValue();
        setFormData(prev => ({
            ...prev,
            ...currentValues
        }));

        setCurrentStep(currentStep - 1);
    };

    const handleUpload = ({ fileList: newFileList }) => {
        setFileList(newFileList);
    };

    const steps = [
        {
            title: 'Th√¥ng tin c∆° b·∫£n',
            description: 'Th√¥ng tin c√° nh√¢n',
            icon: <UserOutlined />
        },
        {
            title: 'Th√¥ng tin chuy√™n m√¥n',
            description: 'Chi ti·∫øt c√¥ng vi·ªác',
            icon: staffType === 'doctor' ? <MedicineBoxOutlined /> : <HeartOutlined />
        },
        {
            title: 'Xem l·∫°i',
            description: 'X√°c nh·∫≠n th√¥ng tin',
            icon: <CheckCircleOutlined />
        }
    ];

    const renderProfessionalStep = () => {
        const availableSpecializations = hospitalSpecializations && hospitalSpecializations.length > 0
            ? hospitalSpecializations
            : specializations || [];

        const availableDepartments = hospitalDepartments && hospitalDepartments.length > 0
            ? hospitalDepartments
            : departments || [];

        return (
            <div style={{
                marginBottom: 32,
                padding: '20px',
                background: '#f0f7ff',
                borderRadius: '8px',
                border: '1px solid #d6e4ff'
            }}>
                <h3 style={{
                    color: '#1890ff',
                    marginBottom: 20,
                    fontSize: '16px',
                    fontWeight: 600,
                    display: 'flex',
                    alignItems: 'center'
                }}>
                    <MedicineBoxOutlined style={{ marginRight: 8 }} />
                    Th√¥ng tin chuy√™n m√¥n
                </h3>

                <Alert
                    message={`Ph√¢n c√¥ng b·ªánh vi·ªán: ${currentHospital?.name || user?.hospitals?.[0]?.name || 'ƒêang t·∫£i...'}`}
                    description={`B√°c sƒ© s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông li√™n k·∫øt v·ªõi ${currentHospital?.name || user?.hospitals?.[0]?.name || 'b·ªánh vi·ªán hi·ªán t·∫°i'} (ID: ${user?.hospitals?.[0]?.id || currentHospital?.id || 'ƒêang t·∫£i...'}) v√† ƒë∆∞·ª£c ph√¢n c√¥ng v√†o khoa ƒë√£ ch·ªçn. S·ªë khoa c√≥ s·∫µn: ${availableDepartments.length}`}
                    type="info"
                    showIcon
                    style={{ marginBottom: 16 }}
                />

                <Row gutter={16}>
                    <Col xs={24} md={12}>
                        <Form.Item
                            name="description"
                            label="M√¥ t·∫£ chuy√™n m√¥n"
                            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' }]}
                        >
                            <Input.TextArea
                                placeholder="B√°c sƒ© tim m·∫°ch c√≥ kinh nghi·ªám 10+ nƒÉm trong y h·ªçc c·∫•p c·ª©u..."
                                rows={3}
                            />
                        </Form.Item>
                    </Col>

                    <Col xs={24} md={12}>
                        <Form.Item
                            name="position"
                            label="Ch·ª©c v·ª•"
                            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ch·ª©c v·ª•' }]}
                            initialValue="B√°c sƒ©"
                        >
                            <Select placeholder="Ch·ªçn ch·ª©c v·ª•">
                                <Option value="B√°c sƒ©">üë®‚Äç‚öïÔ∏è B√°c sƒ©</Option>
                                <Option value="B√°c sƒ© ch√≠nh">üë®‚Äç‚öïÔ∏è B√°c sƒ© ch√≠nh</Option>
                                <Option value="Tr∆∞·ªüng khoa">üë®‚Äç‚öïÔ∏è Tr∆∞·ªüng khoa</Option>
                                <Option value="B√°c sƒ© t∆∞ v·∫•n">üë®‚Äç‚öïÔ∏è B√°c sƒ© t∆∞ v·∫•n</Option>
                                <Option value="Chuy√™n gia">üë®‚Äç‚öïÔ∏è Chuy√™n gia</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                </Row>

                <Row gutter={16}>
                    <Col xs={24} md={12}>
                        <Form.Item
                            name="departmentId"
                            label="Khoa"
                            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn khoa' }]}
                        >
                            <Select placeholder="Ch·ªçn khoa" showSearch>
                                {availableDepartments?.map(dept => (
                                    <Option key={dept.id} value={dept.id}>
                                        üè• {dept.name} (ID: {dept.id})
                                        {dept.description && ` - ${dept.description}`}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </Col>

                    <Col xs={24} md={12}>
                        <Form.Item
                            name="specialization"
                            label="Chuy√™n khoa ch√≠nh"
                            rules={[
                                { required: true, message: 'Vui l√≤ng ch·ªçn chuy√™n khoa' },
                                // Custom validator to handle edge cases
                                {
                                    validator: (_, value) => {
                                        if (value === undefined || value === null || value === '') {
                                            return Promise.reject(new Error('Vui l√≤ng ch·ªçn chuy√™n khoa'));
                                        }
                                        return Promise.resolve();
                                    }
                                }
                            ]}
                        >
                            <Select placeholder="Ch·ªçn chuy√™n khoa" showSearch>
                                {availableSpecializations.map((spec, index) => (
                                    <Option key={index} value={index}>
                                        ü©∫ {typeof spec === 'string' ? spec : spec.name || spec.title}
                                        {typeof spec === 'object' && spec.id && ` (ID: ${spec.id})`}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </Col>
                </Row>

                <Row gutter={16}>
                    <Col xs={24} md={12}>
                        <Form.Item
                            name="specializationIds"
                            label="Chuy√™n khoa ph·ª• (T√πy ch·ªçn)"
                        >
                            <Select
                                mode="multiple"
                                placeholder="Ch·ªçn chuy√™n khoa ph·ª•"
                                showSearch
                            >
                                {availableSpecializations.map((spec, index) => (
                                    <Option key={index} value={index}>
                                        ü©∫ {typeof spec === 'string' ? spec : spec.name || spec.title}
                                        {typeof spec === 'object' && spec.id && ` (ID: ${spec.id})`}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </Col>

                    <Col xs={24} md={12}>
                        <Form.Item
                            name="contractDuration"
                            label="Th·ªùi h·∫°n h·ª£p ƒë·ªìng (NƒÉm)"
                            initialValue={1}
                        >
                            <Select placeholder="Ch·ªçn th·ªùi h·∫°n h·ª£p ƒë·ªìng">
                                <Option value={1}>1 NƒÉm</Option>
                                <Option value={2}>2 NƒÉm</Option>
                                <Option value={3}>3 NƒÉm</Option>
                                <Option value={5}>5 NƒÉm</Option>
                                <Option value={10}>10 NƒÉm</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                </Row>

                <div style={{ marginTop: 16, padding: 8, background: '#f0f0f0', fontSize: '12px' }}>
                    <strong>Th√¥ng tin Debug:</strong>
                    <br />ID B·ªánh vi·ªán c·ªßa User: {user?.hospitals?.[0]?.id || 'Kh√¥ng t√¨m th·∫•y'}
                    <br />T√™n B·ªánh vi·ªán c·ªßa User: {user?.hospitals?.[0]?.name || 'Kh√¥ng t√¨m th·∫•y'}
                    <br />Khoa B·ªánh vi·ªán: {hospitalDepartments?.length || 0} m·ª•c
                    <br />Chuy√™n khoa B·ªánh vi·ªán: {hospitalSpecializations?.length || 0} m·ª•c
                    <br />Khoa d·ª± ph√≤ng: {departments?.length || 0} m·ª•c
                    <br />Chuy√™n khoa d·ª± ph√≤ng: {specializations?.length || 0} m·ª•c
                    <br />ƒêang s·ª≠ d·ª•ng Khoa: {availableDepartments === hospitalDepartments ? 'Khoa b·ªánh vi·ªán' : 'Khoa d·ª± ph√≤ng'}
                    <br />ƒêang s·ª≠ d·ª•ng Chuy√™n khoa: {availableSpecializations === hospitalSpecializations ? 'Chuy√™n khoa b·ªánh vi·ªán' : 'Chuy√™n khoa d·ª± ph√≤ng'}
                </div>
            </div>
        );
    };

    const renderReviewStep = () => {
        const currentValues = form.getFieldsValue();
        const allData = { ...formData, ...currentValues };

        console.log('üìã D·ªØ li·ªáu xem l·∫°i:', allData);

        const availableDepartments = hospitalDepartments && hospitalDepartments.length > 0
            ? hospitalDepartments
            : departments || [];

        const selectedDepartment = availableDepartments?.find(d => d.id === allData.departmentId);

        const availableSpecializations = hospitalSpecializations && hospitalSpecializations.length > 0
            ? hospitalSpecializations
            : specializations || [];

        const primarySpecialization = availableSpecializations[allData.specialization];
        const primarySpecName = typeof primarySpecialization === 'string'
            ? primarySpecialization
            : primarySpecialization?.name || primarySpecialization?.title || 'Kh√¥ng r√µ';

        const additionalSpecs = allData.specializationIds?.map(id => {
            const spec = availableSpecializations[id];
            return typeof spec === 'string' ? spec : spec?.name || spec?.title || 'Kh√¥ng r√µ';
        }).filter(Boolean) || [];

        // Enhanced missing fields detection for review step
        const missingFields = [];
        if (!allData.fullname) missingFields.push('fullname');
        if (!allData.phoneNumber) missingFields.push('phoneNumber');
        if (!allData.password) missingFields.push('password');
        if (!allData.cccd) missingFields.push('cccd');
        if (!allData.gender) missingFields.push('gender');
        if (!allData.dob) missingFields.push('dob');
        if (!allData.province) missingFields.push('province');
        if (!allData.ward) missingFields.push('ward');
        if (!allData.streetAddress) missingFields.push('streetAddress');
        if (!allData.description) missingFields.push('description');
        if (!allData.position) missingFields.push('position');
        if (!allData.departmentId) missingFields.push('departmentId');
        
        // Fix specialization check in review step
        if (allData.specialization === undefined || allData.specialization === null || allData.specialization === '') {
            missingFields.push('specialization');
        }

        return (
            <div style={{
                marginBottom: 32,
                padding: '20px',
                background: '#f6ffed',
                borderRadius: '8px',
                border: '1px solid #b7eb8f'
            }}>
                <h3 style={{
                    color: '#52c41a',
                    marginBottom: 20,
                    fontSize: '16px',
                    fontWeight: 600,
                    display: 'flex',
                    alignItems: 'center'
                }}>
                    <CheckCircleOutlined style={{ marginRight: 8 }} />
                    Xem l·∫°i th√¥ng tin
                </h3>

                <Alert
                    message="Vui l√≤ng xem l·∫°i t·∫•t c·∫£ th√¥ng tin tr∆∞·ªõc khi t·∫°o t√†i kho·∫£n"
                    description="ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin ƒë·ªÅu ch√≠nh x√°c v√¨ m·ªôt s·ªë th√¥ng tin kh√¥ng th·ªÉ thay ƒë·ªïi sau n√†y."
                    type="info"
                    showIcon
                    style={{ marginBottom: 20 }}
                />

                <div style={{ background: 'white', padding: '16px', borderRadius: '6px' }}>
                    <div style={{ fontSize: '14px', lineHeight: '1.8' }}>
                        <Row gutter={32}>
                            <Col span={12}>
                                <h4 style={{ color: '#1890ff', marginBottom: 12 }}>üë§ Th√¥ng tin c√° nh√¢n</h4>
                                <p><strong>H·ªç t√™n:</strong> {allData.fullname || 'Ch∆∞a cung c·∫•p'}</p>
                                <p><strong>ƒêi·ªán tho·∫°i:</strong> {allData.phoneNumber || 'Ch∆∞a cung c·∫•p'}</p>
                                <p><strong>Gi·ªõi t√≠nh:</strong> {allData.gender === 'male' ? 'üë® Nam' : allData.gender === 'female' ? 'üë© N·ªØ' : 'Ch∆∞a ch·ªçn'}</p>
                                <p><strong>CCCD:</strong> {allData.cccd || 'Ch∆∞a cung c·∫•p'}</p>
                                <p><strong>Ng√†y sinh:</strong> {allData.dob ? (typeof allData.dob === 'string' ? allData.dob : allData.dob.format('DD/MM/YYYY')) : 'Ch∆∞a cung c·∫•p'}</p>
                                <p><strong>ƒê·ªãa ch·ªâ:</strong> {[allData.streetAddress, allData.ward, allData.province].filter(Boolean).join(', ') || 'Ch∆∞a cung c·∫•p'}</p>
                            </Col>
                            <Col span={12}>
                                <h4 style={{ color: '#1890ff', marginBottom: 12 }}>üè• Th√¥ng tin chuy√™n m√¥n</h4>
                                <p><strong>B·ªánh vi·ªán:</strong> {currentHospital?.name || user?.hospitals?.[0]?.name || 'ƒêang t·∫£i...'} (ID: {user?.hospitals?.[0]?.id || currentHospital?.id || 'N/A'})</p>
                                <p><strong>Khoa:</strong> {selectedDepartment?.name || 'Ch∆∞a ch·ªçn'} (ID: {allData.departmentId || 'N/A'})</p>
                                <p><strong>Ch·ª©c v·ª•:</strong> {allData.position || 'Ch∆∞a ch·ªçn'}</p>
                                <p><strong>Chuy√™n khoa ch√≠nh:</strong> {primarySpecName}</p>
                                {additionalSpecs.length > 0 && (
                                    <p><strong>Chuy√™n khoa ph·ª•:</strong> {additionalSpecs.join(', ')}</p>
                                )}
                                <p><strong>M√¥ t·∫£:</strong> {allData.description ? `${allData.description.substring(0, 100)}...` : 'Ch∆∞a cung c·∫•p'}</p>

                                <div style={{ marginTop: 16, padding: 8, background: '#f0f0f0', fontSize: '12px' }}>
                                    <strong>Xem tr∆∞·ªõc API Payload:</strong>
                                    <br />ID B·ªánh vi·ªán: {user?.hospitals?.[0]?.id || currentHospital?.id || 105}
                                    <br />ID Khoa: {allData.departmentId || 'Ch∆∞a ch·ªçn'}
                                    <br />T√™n Khoa: {selectedDepartment?.name || 'Kh√¥ng t√¨m th·∫•y'}
                                    <br />ID Chuy√™n khoa: {(() => {
                                        const primaryId = allData.specialization !== undefined ? 
                                            (availableSpecializations[allData.specialization]?.id || allData.specialization) : undefined;
                                        const additionalIds = (allData.specializationIds || []).map(id => 
                                            availableSpecializations[id]?.id || id
                                        );
                                        const allIds = [primaryId, ...additionalIds].filter(id => id !== undefined);
                                        return allIds.join(', ') || 'Kh√¥ng c√≥';
                                    })()}
                                    <br />Thi·∫øu b·∫Øt bu·ªôc: {missingFields.join(', ') || 'Kh√¥ng c√≥'}
                                </div>
                            </Col>
                        </Row>
                    </div>
                </div>
            </div>
        );
    };

    const renderStepContent = () => {
        switch (currentStep) {
            case 0:
                return (
                    <div style={{
                        marginBottom: 32,
                        padding: '20px',
                        background: '#f8f9fa',
                        borderRadius: '8px',
                        border: '1px solid #e8e8e8'
                    }}>
                        <h3 style={{
                            color: '#1890ff',
                            marginBottom: 20,
                            fontSize: '16px',
                            fontWeight: 600,
                            display: 'flex',
                            alignItems: 'center'
                        }}>
                            <UserOutlined style={{ marginRight: 8 }} />
                            Th√¥ng tin c∆° b·∫£n
                        </h3>

                        <Row gutter={16}>
                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="fullname"
                                    label="H·ªç v√† t√™n"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' },
                                        { min: 2, message: 'T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±' }
                                    ]}
                                >
                                    <Input placeholder="BS. Nguy·ªÖn VƒÉn A" />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="phoneNumber"
                                    label="S·ªë ƒëi·ªán tho·∫°i"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
                                        { pattern: /^[0-9]{10,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë' }
                                    ]}
                                >
                                    <Input placeholder="0123456789" />
                                </Form.Item>
                            </Col>
                        </Row>

                        <Row gutter={16}>
                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="gender"
                                    label="Gi·ªõi t√≠nh"
                                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh' }]}
                                >
                                    <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
                                        <Option value="male">üë® Nam</Option>
                                        <Option value="female">üë© N·ªØ</Option>
                                    </Select>
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="dob"
                                    label="Ng√†y sinh"
                                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh' }]}
                                >
                                    {/* ‚úÖ Enhanced DatePicker with Vietnamese locale */}
                                    <DatePicker
                                        style={{ width: '100%' }}
                                        placeholder="Ch·ªçn ng√†y sinh"
                                        format="DD/MM/YYYY"  // ‚úÖ Vietnamese date format
                                        locale={locale.DatePicker}
                                        disabledDate={(current) => {
                                            return current && current > dayjs().endOf('day');
                                        }}
                                    />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="cccd"
                                    label="S·ªë CCCD/CMND"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD' },
                                        { pattern: /^[0-9]{9,12}$/, message: 'CCCD ph·∫£i c√≥ 9-12 ch·ªØ s·ªë' }
                                    ]}
                                >
                                    <Input placeholder="Nh·∫≠p s·ªë CCCD" />
                                </Form.Item>
                            </Col>
                        </Row>

                        <Row gutter={16}>
                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="password"
                                    label="M·∫≠t kh·∫©u"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u' },
                                        { min: 6, message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' }
                                    ]}
                                >
                                    <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="confirmPassword"
                                    label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                                    dependencies={['password']}
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u' },
                                        ({ getFieldValue }) => ({
                                            validator(_, value) {
                                                if (!value || getFieldValue('password') === value) {
                                                    return Promise.resolve();
                                                }
                                                return Promise.reject(new Error('M·∫≠t kh·∫©u kh√¥ng kh·ªõp!'));
                                            },
                                        }),
                                    ]}
                                >
                                    <Input.Password placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u" />
                                </Form.Item>
                            </Col>
                        </Row>

                        <Row gutter={16}>
                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="avatarUrl"
                                    label="URL ·∫£nh ƒë·∫°i di·ªán"
                                >
                                    <Input placeholder="https://example.com/photo.jpg" />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={12}>
                                <Form.Item
                                    name="job"
                                    label="Ch·ª©c danh ngh·ªÅ nghi·ªáp"
                                    initialValue="B√°c sƒ©"
                                >
                                    <Input placeholder="B√°c sƒ©" disabled />
                                </Form.Item>
                            </Col>
                        </Row>

                        {/* Updated Province and Ward selection */}
                        <Row gutter={16}>
                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="province"
                                    label="T·ªânh/Th√†nh ph·ªë"
                                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!' }]}
                                >
                                    <Select
                                        placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë"
                                        showSearch
                                        loading={loadingProvinces}
                                        filterOption={(input, option) =>
                                            (option?.label ?? "")
                                                .toLowerCase()
                                                .includes(input.toLowerCase())
                                        }
                                        options={provinces.map((p) => ({
                                            label: p.province,
                                            value: p.province,
                                        }))}
                                        allowClear
                                        onSelect={(value) => {
                                            console.log("üèôÔ∏è ƒê√£ ch·ªçn t·ªânh:", value);
                                        }}
                                    />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="ward"
                                    label="Qu·∫≠n/Huy·ªán"
                                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán!' }]}
                                >
                                    <Select
                                        placeholder={
                                            selectedProvince
                                                ? "Ch·ªçn qu·∫≠n/huy·ªán"
                                                : "Ch·ªçn t·ªânh/th√†nh ph·ªë tr∆∞·ªõc"
                                        }
                                        showSearch
                                        disabled={!selectedProvince}
                                        loading={selectedProvince && wards.length === 0}
                                        options={wards.map((w) => ({
                                            label: w.name,
                                            value: w.name
                                        }))}
                                        filterOption={(input, option) =>
                                            (option?.label ?? "")
                                                .toLowerCase()
                                                .includes(input.toLowerCase())
                                        }
                                        allowClear
                                        onSelect={(value) => {
                                            console.log("üèòÔ∏è ƒê√£ ch·ªçn qu·∫≠n/huy·ªán:", value);
                                        }}
                                    />
                                </Form.Item>
                            </Col>

                            <Col xs={24} md={8}>
                                <Form.Item
                                    name="streetAddress"
                                    label="S·ªë nh√†, ƒë∆∞·ªùng"
                                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}
                                >
                                    <Input placeholder="123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá" />
                                </Form.Item>
                            </Col>
                        </Row>

                        {/* Debug info for provinces (remove in production) */}
                        {process.env.NODE_ENV === 'development' && (
                            <div style={{
                                background: "#f0f0f0",
                                padding: 12,
                                borderRadius: 6,
                                fontSize: '12px',
                                marginTop: 16
                            }}>
                                <strong>üîç Th√¥ng tin Debug T·ªânh th√†nh:</strong><br />
                                ƒê√£ t·∫£i t·ªânh th√†nh: {provinces.length}<br />
                                T·ªânh ƒë∆∞·ª£c ch·ªçn: {selectedProvince || "Kh√¥ng c√≥"}<br />
                                Qu·∫≠n/huy·ªán c√≥ s·∫µn: {wards.length}<br />
                                ƒêang t·∫£i t·ªânh th√†nh: {loadingProvinces ? "C√≥" : "Kh√¥ng"}
                            </div>
                        )}
                    </div>
                );

            case 1:
                return renderProfessionalStep();

            case 2:
                return renderReviewStep();

            default:
                return null;
        }
    };

    return (
        <>
            {contextHolder}
            
            {/* ‚úÖ ConfigProvider with Vietnamese locale */}
            <ConfigProvider locale={locale}>
                <Modal
                    title={
                        <div style={{ display: 'flex', alignItems: 'center' }}>
                            <UserAddOutlined style={{
                                color: staffType === 'doctor' ? '#1890ff' : '#52c41a',
                                marginRight: 8,
                                fontSize: '20px'
                            }} />
                            <span style={{ fontSize: '18px', fontWeight: 600 }}>
                                Th√™m {staffType === 'doctor' ? 'B√°c sƒ©' : 'ƒêi·ªÅu d∆∞·ª°ng'} m·ªõi
                            </span>
                        </div>
                    }
                    open={visible}
                    onCancel={onCancel}
                    footer={null}
                    width={1100}
                    destroyOnClose
                    style={{ top: 20 }}
                >
                    <Spin spinning={loading}>
                        <div style={{ maxHeight: '75vh', overflowY: 'auto', padding: '0 4px' }}>
                            <div style={{ marginBottom: 32 }}>
                                <Steps current={currentStep} size="small">
                                    {steps.map((step, index) => (
                                        <Step
                                            key={index}
                                            title={step.title}
                                            description={step.description}
                                            icon={step.icon}
                                        />
                                    ))}
                                </Steps>
                            </div>

                            <Form
                                form={form}
                                layout="vertical"
                                preserve={true}
                                onValuesChange={onFormValuesChange}
                            >
                                {renderStepContent()}

                                <div style={{
                                    display: 'flex',
                                    justifyContent: 'space-between',
                                    gap: 12,
                                    paddingTop: 16,
                                    borderTop: '1px solid #f0f0f0'
                                }}>
                                    <div>
                                        {currentStep > 0 && (
                                            <Button onClick={prevStep} size="large">
                                                Quay l·∫°i
                                            </Button>
                                        )}
                                    </div>

                                    <div style={{ display: 'flex', gap: 12 }}>
                                        <Button onClick={onCancel} size="large">
                                            H·ªßy
                                        </Button>

                                        {currentStep < steps.length - 1 ? (
                                            <Button
                                                type="primary"
                                                onClick={nextStep}
                                                size="large"
                                                style={{
                                                    backgroundColor: staffType === 'doctor' ? '#1890ff' : '#52c41a',
                                                    borderColor: staffType === 'doctor' ? '#1890ff' : '#52c41a'
                                                }}
                                            >
                                                Ti·∫øp theo
                                            </Button>
                                        ) : (
                                            <Button
                                                type="primary"
                                                onClick={handleSubmit}
                                                loading={loading}
                                                size="large"
                                                icon={<SaveOutlined />}
                                                style={{
                                                    backgroundColor: staffType === 'doctor' ? '#1890ff' : '#52c41a',
                                                    borderColor: staffType === 'doctor' ? '#1890ff' : '#52c41a'
                                                }}
                                            >
                                                T·∫°o {staffType === 'doctor' ? 'B√°c sƒ©' : 'ƒêi·ªÅu d∆∞·ª°ng'}
                                            </Button>
                                        )}
                                    </div>
                                </div>
                            </Form>
                        </div>
                    </Spin>
                </Modal>
            </ConfigProvider>
        </>
    );
};

export default AddStaff;