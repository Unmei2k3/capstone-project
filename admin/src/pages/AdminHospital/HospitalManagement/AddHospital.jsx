import React, { useState, useEffect } from 'react';
import { Modal, Form, Input, Row, Col, Button, Spin, TimePicker, message } from 'antd';
import { PlusOutlined, MedicineBoxOutlined } from '@ant-design/icons';
import { useDispatch, useSelector } from 'react-redux';
import { setMessage, clearMessage } from '../../../redux/slices/messageSlice';
import { createHospital } from '../../../services/hospitalService';
import dayjs from 'dayjs';

const { TextArea } = Input;

const AddHospital = ({ visible, onCancel, onSuccess }) => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    
    // ‚úÖ Redux hooks for message handling
    const dispatch = useDispatch();
    const messageState = useSelector(state => state.message);
    const [messageApi, contextHolder] = message.useMessage();

    // ‚úÖ Message handler using Redux pattern
    useEffect(() => {
        if (messageState && messageState.content) {
            messageApi.open({
                type: messageState.type,
                content: messageState.content,
            });
            dispatch(clearMessage());
        }
    }, [messageState, messageApi, dispatch]);

    // ‚úÖ Clear message when modal opens/closes
    useEffect(() => {
        if (visible) {
            dispatch(clearMessage());
            form.resetFields();
        } else {
            dispatch(clearMessage());
        }
    }, [visible, dispatch, form]);

    const handleSubmit = async (values) => {
        setLoading(true);
        dispatch(clearMessage());

        try {
            dispatch(setMessage({
                type: 'info',
                content: '‚è≥ ƒêang t·∫°o b·ªánh vi·ªán m·ªõi...'
            }));

            // ‚úÖ Get current date for time formatting
            const currentDate = new Date().toISOString().split('T')[0];

            // ‚úÖ Transform data to match exact API payload format
            const hospitalData = {
                Name: values.name?.trim() || "",
                Address: values.address?.trim() || "",
                Image: values.image?.trim() || "",
                GoogleMapUri: values.googleMapUri?.trim() || "",
                PhoneNumber: values.phoneNumber?.trim() || "",
                Email: values.email?.trim() || "",
                // ‚úÖ Convert time to ISO datetime format matching API
                OpenTime: values.openTime
                    ? `${currentDate}T${values.openTime.format('HH:mm:ss')}.988Z`
                    : `2025-08-16T08:00:00.988Z`,
                CloseTime: values.closeTime
                    ? `${currentDate}T${values.closeTime.format('HH:mm:ss')}.988Z`
                    : `2025-08-16T18:00:00.988Z`
            };

            console.log('üì§ D·ªØ li·ªáu b·ªánh vi·ªán g·ª≠i ƒëi:', hospitalData);

            const response = await createHospital(hospitalData);
            console.log('üì• Ph·∫£n h·ªìi t·ª´ API:', response);

            // ‚úÖ Enhanced success validation
            if (response?.success || response?.result || response?.id) {
                dispatch(setMessage({
                    type: 'success',
                    content: `üéâ T·∫°o b·ªánh vi·ªán "${hospitalData.Name}" th√†nh c√¥ng!`
                }));

                form.resetFields();
                
                if (onSuccess && typeof onSuccess === 'function') {
                    onSuccess(response);
                }

                setTimeout(() => {
                    handleCancel();
                }, 1500);
            } else {
                throw new Error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server');
            }

        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o b·ªánh vi·ªán:', error);

            let errorMessage = 'Kh√¥ng th·ªÉ t·∫°o b·ªánh vi·ªán. Vui l√≤ng th·ª≠ l·∫°i.';

            if (error.response?.data) {
                const errorData = error.response.data;
                console.log('üîç Error response data:', errorData);

                if (errorData.title) {
                    switch (errorData.title) {
                        case 'HOSPITAL_NAME_EXISTS':
                            errorMessage = 'üè• T√™n b·ªánh vi·ªán ƒë√£ t·ªìn t·∫°i! Vui l√≤ng s·ª≠ d·ª•ng t√™n kh√°c.';
                            break;
                        case 'EMAIL_ALREADY_EXISTS':
                            errorMessage = 'üìß Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω! Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.';
                            break;
                        case 'PHONE_ALREADY_EXISTS':
                            errorMessage = 'üì± S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω! Vui l√≤ng s·ª≠ d·ª•ng s·ªë ƒëi·ªán tho·∫°i kh√°c.';
                            break;
                        case 'VALIDATION_ERROR':
                            errorMessage = '‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p.';
                            break;
                        default:
                            errorMessage = `‚ùå ${errorData.title.replace(/_/g, ' ')} - Vui l√≤ng th·ª≠ l·∫°i.`;
                            break;
                    }
                } else if (errorData.message) {
                    errorMessage = `‚ùå ${errorData.message}`;
                }
            } else if (error.message) {
                errorMessage = `‚ùå ${error.message}`;
            }

            if (error.code === 'NETWORK_ERROR' || !error.response) {
                errorMessage = 'üåê L·ªói k·∫øt n·ªëi m·∫°ng! Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
            }

            dispatch(setMessage({
                type: 'error',
                content: errorMessage
            }));

        } finally {
            setLoading(false);
        }
    };

    const handleCancel = () => {
        dispatch(clearMessage());
        form.resetFields();
        
        if (onCancel && typeof onCancel === 'function') {
            onCancel();
        }
    };

    return (
        <>
            {contextHolder}
            <Modal
                title={
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                        <MedicineBoxOutlined style={{ color: '#1890ff', marginRight: 8 }} />
                        Th√™m B·ªánh vi·ªán m·ªõi
                    </div>
                }
                open={visible}
                onCancel={handleCancel}
                footer={null}
                width={700}
                destroyOnClose
                maskClosable={false}
                style={{ top: 20 }}
            >
                <Spin spinning={loading} tip="ƒêang t·∫°o b·ªánh vi·ªán...">
                    <Form
                        form={form}
                        layout="vertical"
                        onFinish={handleSubmit}
                        initialValues={{
                            openTime: dayjs('08:00', 'HH:mm'),
                            closeTime: dayjs('18:00', 'HH:mm')
                        }}
                        scrollToFirstError
                    >
                        {/* ‚úÖ Th√¥ng tin b·∫Øt bu·ªôc */}
                        <div style={{ 
                            marginBottom: 24, 
                            padding: '16px', 
                            background: '#f0f7ff', 
                            borderRadius: '8px',
                            border: '1px solid #d6e4ff'
                        }}>
                            <h4 style={{ color: '#1890ff', marginBottom: 16 }}>üè• Th√¥ng tin B·ªánh vi·ªán</h4>
                            
                            <Form.Item
                                name="name"
                                label="T√™n b·ªánh vi·ªán"
                                rules={[
                                    { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n b·ªánh vi·ªán' },
                                    { min: 3, message: 'T√™n b·ªánh vi·ªán ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±' },
                                    { max: 200, message: 'T√™n b·ªánh vi·ªán kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±' }
                                ]}
                                hasFeedback
                            >
                                <Input 
                                    placeholder="B·ªánh vi·ªán ƒêa khoa Th√†nh ph·ªë" 
                                    showCount
                                    maxLength={200}
                                />
                            </Form.Item>

                            <Form.Item
                                name="address"
                                label="ƒê·ªãa ch·ªâ b·ªánh vi·ªán"
                                rules={[
                                    { required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ' },
                                    { min: 5, message: 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±' },
                                    { max: 500, message: 'ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±' }
                                ]}
                                hasFeedback
                            >
                                <Input 
                                    placeholder="120 C·∫ßu Gi·∫•y, H√† N·ªôi" 
                                    showCount
                                    maxLength={500}
                                />
                            </Form.Item>

                            <Row gutter={16}>
                                <Col xs={24} md={12}>
                                    <Form.Item
                                        name="phoneNumber"
                                        label="S·ªë ƒëi·ªán tho·∫°i"
                                        rules={[
                                            { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
                                            { pattern: /^[0-9+\-\s()]+$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá' },
                                            { min: 10, message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' }
                                        ]}
                                        hasFeedback
                                    >
                                        <Input placeholder="0826259603" />
                                    </Form.Item>
                                </Col>

                                <Col xs={24} md={12}>
                                    <Form.Item
                                        name="email"
                                        label="Email"
                                        rules={[
                                            { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                                            { type: 'email', message: 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá' },
                                            { max: 100, message: 'Email kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±' }
                                        ]}
                                        hasFeedback
                                    >
                                        <Input placeholder="benhvien@example.com" />
                                    </Form.Item>
                                </Col>
                            </Row>
                        </div>

                        {/* ‚úÖ Gi·ªù ho·∫°t ƒë·ªông */}
                        <div style={{ 
                            marginBottom: 24, 
                            padding: '16px', 
                            background: '#f6ffed', 
                            borderRadius: '8px',
                            border: '1px solid #b7eb8f'
                        }}>
                            <h4 style={{ color: '#52c41a', marginBottom: 16 }}>‚è∞ Gi·ªù ho·∫°t ƒë·ªông</h4>

                            <Row gutter={16}>
                                <Col xs={24} md={12}>
                                    <Form.Item
                                        name="openTime"
                                        label="Gi·ªù m·ªü c·ª≠a"
                                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªù m·ªü c·ª≠a' }]}
                                        hasFeedback
                                    >
                                        <TimePicker
                                            style={{ width: '100%' }}
                                            format="HH:mm"
                                            placeholder="Ch·ªçn gi·ªù m·ªü c·ª≠a"
                                            showNow={false}
                                        />
                                    </Form.Item>
                                </Col>

                                <Col xs={24} md={12}>
                                    <Form.Item
                                        name="closeTime"
                                        label="Gi·ªù ƒë√≥ng c·ª≠a"
                                        rules={[
                                            { required: true, message: 'Vui l√≤ng ch·ªçn gi·ªù ƒë√≥ng c·ª≠a' },
                                            ({ getFieldValue }) => ({
                                                validator(_, value) {
                                                    const openTime = getFieldValue('openTime');
                                                    if (!value || !openTime || value.isAfter(openTime)) {
                                                        return Promise.resolve();
                                                    }
                                                    return Promise.reject(new Error('Gi·ªù ƒë√≥ng c·ª≠a ph·∫£i sau gi·ªù m·ªü c·ª≠a!'));
                                                },
                                            }),
                                        ]}
                                        hasFeedback
                                    >
                                        <TimePicker
                                            style={{ width: '100%' }}
                                            format="HH:mm"
                                            placeholder="Ch·ªçn gi·ªù ƒë√≥ng c·ª≠a"
                                            showNow={false}
                                        />
                                    </Form.Item>
                                </Col>
                            </Row>
                        </div>

                        {/* ‚úÖ H√¨nh ·∫£nh v√† li√™n k·∫øt (T√πy ch·ªçn) */}
                        <div style={{ 
                            marginBottom: 24, 
                            padding: '16px', 
                            background: '#fff7e6', 
                            borderRadius: '8px',
                            border: '1px solid #ffd591'
                        }}>
                            <h4 style={{ color: '#faad14', marginBottom: 16 }}>üñºÔ∏è H√¨nh ·∫£nh v√† B·∫£n ƒë·ªì (T√πy ch·ªçn)</h4>

                            <Form.Item
                                name="image"
                                label="URL Logo/H√¨nh ·∫£nh b·ªánh vi·ªán"
                                rules={[
                                    { type: 'url', message: 'Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá' }
                                ]}
                            >
                                <Input 
                                    placeholder="https://example.com/logo-benh-vien.png" 
                                    allowClear
                                />
                            </Form.Item>

                            <Form.Item
                                name="googleMapUri"
                                label="Li√™n k·∫øt Google Maps"
                                rules={[
                                    { type: 'url', message: 'Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá' }
                                ]}
                            >
                                <TextArea
                                    rows={3}
                                    placeholder="https://www.google.com/maps/embed?pb=1m18!1m12!1m3!1d3724..."
                                    showCount
                                    maxLength={1000}
                                />
                            </Form.Item>
                        </div>

                        {/* ‚úÖ L∆∞u √Ω ng·∫Øn g·ªçn */}
                        <div style={{
                            marginBottom: 24,
                            padding: '12px 16px',
                            background: '#f6ffed',
                            borderRadius: '6px',
                            border: '1px solid #b7eb8f',
                            fontSize: '13px'
                        }}>
                            <div style={{ color: '#389e0d', fontWeight: 500, marginBottom: 4 }}>
                                üí° L∆∞u √Ω quan tr·ªçng:
                            </div>
                            <div style={{ color: '#666', lineHeight: '1.4' }}>
                                ‚Ä¢ <strong>T√™n b·ªánh vi·ªán</strong> v√† <strong>Email</strong> ph·∫£i l√† duy nh·∫•t trong h·ªá th·ªëng<br />
                                ‚Ä¢ <strong>S·ªë ƒëi·ªán tho·∫°i</strong> ph·∫£i l√† s·ªë h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng<br />
                                ‚Ä¢ <strong>H√¨nh ·∫£nh v√† Google Maps</strong> c√≥ th·ªÉ b·ªï sung sau khi t·∫°o b·ªánh vi·ªán
                            </div>
                        </div>

                        {/* ‚úÖ N√∫t h√†nh ƒë·ªông */}
                        <Row justify="end" gutter={8}>
                            <Col>
                                <Button onClick={handleCancel} disabled={loading}>
                                    H·ªßy
                                </Button>
                            </Col>
                            <Col>
                                <Button 
                                    type="primary" 
                                    htmlType="submit" 
                                    loading={loading}
                                    icon={<PlusOutlined />}
                                    size="large"
                                    style={{
                                        backgroundColor: '#1890ff',
                                        borderColor: '#1890ff'
                                    }}
                                >
                                    {loading ? 'ƒêang t·∫°o...' : 'T·∫°o B·ªánh vi·ªán'}
                                </Button>
                            </Col>
                        </Row>
                    </Form>
                </Spin>
            </Modal>
        </>
    );
};

export default AddHospital;